apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: result-handler
spec:
  templates:
    - name: result-handler
      inputs:
        artifacts:
          - name: metadata
            path: /tmp/metadata
        parameters:
          - name: stac-catalog-link
          - name: image-pull-policy
          - name: timeout
          - name: callback
          - name: batch-count
          - name: should-post-results
          - name: post-batch-step-count
      podSpecPatch: '{"activeDeadlineSeconds":{{inputs.parameters.timeout}}}'
      script:
        image: "everpeace/curl-jq"
        imagePullPolicy: "{{inputs.parameters.image-pull-policy}}"
        command: [bash]
        envFrom:
          - configMapRef:
              name: harmony-env
        env:
          - name: SHOULD_POST_RESULTS
            value: "{{inputs.parameters.should-post-results}}"
        source: |
          #!/usr/bin/env bash
          # timing
          timestamp=`date +%Y-%m-%dT%H:%M:%S.%3NZ`
          echo "{\"level\": \"info\", \"timestamp\": \"$timestamp\", \"message\": \"timing.result-handler.start\"}"
          start_time_millis=`date +%s%3N`
          EXIT_CODE=0
          if [[ "${SHOULD_POST_RESULTS}" == "true" ]]; then
          STAC_CATALOG_LINK="{{inputs.parameters.stac-catalog-link}}"
          STAC_CATALOG=$(cat "/tmp/metadata/${STAC_CATALOG_LINK}")
          LINKS=$(echo "${STAC_CATALOG}" | jq -r '.links[] | select(.rel=="item") | .href')
          IFS=$'\n' read -rd '' -a LINKS_ARRAY <<< "${LINKS}"
          LINK_INDEX=0
          LINK_COUNT="${#LINKS_ARRAY[@]}"
          LINKS_JSON="["
          for LINK in "${LINKS_ARRAY[@]}"
          do
          LINK_INDEX=$((LINK_INDEX+1))
          # read and parse the STAC item file
          STAC_ITEM=$(cat "/tmp/metadata/${LINK}")
          DATA_LINK=$(echo "${STAC_ITEM}" | jq -r '.assets.data')
          START=$(echo "${STAC_ITEM}" | jq -r '.properties.start_datetime')
          END=$(echo "${STAC_ITEM}" | jq -r '.properties.end_datetime')
          BBOX=$(echo "${STAC_ITEM}" | jq -r '.bbox')
          BBOX="\"bbox\": ${BBOX}"
          TEMPORAL="{\"temporal\": \"${START},${END}\",${BBOX}, "
          DATA_LINK="${DATA_LINK/{/$TEMPORAL}"
          LINKS_JSON="${LINKS_JSON}${DATA_LINK}"
          if [[ "${LINK_INDEX}" -lt "${LINK_COUNT}" ]]; then
          LINKS_JSON="${LINKS_JSON}, "
          fi
          # LINKS_JSON="${LINKS_JSON} \n"
          done
          LINKS_JSON="${LINKS_JSON}]"
          curl -f -XPOST \
          --data-urlencode "batch_completed=true" \
          --data-urlencode "batch_count={{inputs.parameters.batch-count}}" \
          --data-urlencode "post_batch_step_count={{inputs.parameters.post-batch-step-count}}" \
          --data-urlencode "items=${LINKS_JSON}" \
          "{{inputs.parameters.callback}}/argo-response" > /dev/null
          else
          curl -f -XPOST \
          --data-urlencode "batch_completed=true" \
          --data-urlencode "batch_count={{inputs.parameters.batch-count}}" \
          --data-urlencode "post_batch_step_count={{inputs.parameters.post-batch-step-count}}" \
          "{{inputs.parameters.callback}}/argo-response" > /dev/null
          fi
          EXIT_CODE=$?
          timestamp=`date +%Y-%m-%dT%H:%M:%S.%3NZ`
          echo "{\"level\": \"info\", \"timestamp\": \"$timestamp\", \"message\": \"Progress callback completed with exit code ${EXIT_CODE}\"}"
          end_time_millis=`date +%s%3N`
          duration_ms=$(($end_time_millis-$start_time_millis))
          timestamp=`date +%Y-%m-%dT%H:%M:%S.%3NZ`
          echo "{\"level\": \"info\", \"timestamp\": \"$timestamp\", \"durationMs\": $duration_ms, \"message\": \"timing.result-handler.end\"}"
          exit $EXIT_CODE
