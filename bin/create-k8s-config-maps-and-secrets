#!/bin/bash

HARMONY_VERSION=$(grep version ./package.json \
    | head -1 \
    | awk -F: '{ print $2 }' \
    | sed 's/[",]//g' \
| tr -d '[[:space:]]')

USER_AGENT="harmony/${HARMONY_VERSION} (${CLIENT_ID})"

SERVICES_YML=$(< config/services.yml)

cat <<EOF | kubectl -n argo apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: harmony-env
data:
  AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"
  USE_LOCALSTACK: "${USE_LOCALSTACK}"
  LOCALSTACK_HOST: "${LOCALSTACK_K8S_HOST}"
  STAGING_BUCKET: "${STAGING_BUCKET}"
  STAGING_PATH: "${STAGING_PATH}"
  TEXT_LOGGER: "${TEXT_LOGGER}"
  BACKEND_HOST: "${BACKEND_HOST}"
  CALLBACK_URL_ROOT: "${CALLBACK_URL_ROOT}"
  OAUTH_HOST: "${OAUTH_HOST}"
  OAUTH_CLIENT_ID: "${OAUTH_CLIENT_ID}"
  OAUTH_REDIRECT_URI: "${OAUTH_REDIRECT_URI}"
  FALLBACK_AUTHN_ENABLED: "${FALLBACK_AUTHN_ENABLED}"
  CMR_ENDPOINT: "${CMR_ENDPOINT}"
  USER_AGENT: "${USER_AGENT}"
  SERVICES_YML: $(echo -n "${SERVICES_YML}" | base64 | tr -d "\n")
  ASF_GDAL_SUBSETTER_IMAGE: "${ASF_GDAL_SUBSETTER_IMAGE}"
  HARMONY_SERVICE_EXAMPLE_IMAGE: "${HARMONY_SERVICE_EXAMPLE_IMAGE}"
  HARMONY_NETCDF_TO_ZARR_IMAGE: "${HARMONY_NETCDF_TO_ZARR_IMAGE}"
  PODAAC_CONCISE_IMAGE: "${PODAAC_CONCISE_IMAGE}"
  PODAAC_L2_SUBSETTER_IMAGE: "${PODAAC_L2_SUBSETTER_IMAGE}"
  PODAAC_PS3_IMAGE: "${PODAAC_PS3_IMAGE}"
  PODAAC_NETCDF_CONVERTER_IMAGE: "${PODAAC_NETCDF_CONVERTER_IMAGE}"
  SDS_MASKFILL_IMAGE: "${SDS_MASKFILL_IMAGE}"
  SWOT_REPROJECT_IMAGE: "${SWOT_REPROJECT_IMAGE}"
  TRAJECTORY_SUBSETTER_IMAGE: "${TRAJECTORY_SUBSETTER_IMAGE}"
  VAR_SUBSETTER_IMAGE: "${VAR_SUBSETTER_IMAGE}"
  CMR_GRANULE_LOCATOR_IMAGE: "${CMR_GRANULE_LOCATOR_IMAGE}"
  SERVICE_RUNNER_IMAGE: "${SERVICE_RUNNER_IMAGE}"
EOF

set +x

cat <<EOF | kubectl -n argo apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: harmony-secrets
type: Opaque
data:
  OAUTH_UID: $(echo -n "${OAUTH_UID}" | base64)
  OAUTH_PASSWORD: $(echo -n "${OAUTH_PASSWORD}" | base64)
  EDL_USERNAME: $(echo -n "${EDL_USERNAME:-unset}" | base64)
  EDL_PASSWORD: $(echo -n "${EDL_PASSWORD:-unset}" | base64)
  SHARED_SECRET_KEY: $(echo -n "${SHARED_SECRET_KEY}" | base64)
  COOKIE_SECRET: $(echo -n "${COOKIE_SECRET}" | base64 | tr -d "\n")
EOF
