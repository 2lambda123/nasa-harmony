#!/bin/bash

SELF=$(basename $0)

function usage
{
  echo "Usage: $SELF [-c|--create] [-d|--driver <driver>] [port]"

  echo "port must be a number"
}

CREATE=false

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
  -c|--create)
  CREATE=true
  shift
  ;;
  -d|--driver)
  DRIVER=$2
  shift
  shift
  ;;
  *)
  PPORT="$1"
  shift
  ;;
esac
done


# use docker driver as the default
DRIVER_DEFAULT=docker

DRIVER=${DRIVER:-$DRIVER_DEFAULT}

source ".env"

PORT=${PPORT:-2746}

[[ $PORT =~ ^[0-9]+$ ]] || (usage && exit 1)

echo "$DRIVER"

minikube start --driver="$DRIVER"

sleep 5

# make sure we are talking to minikube and not some other environment
kubectl config use-context minikube

if [[ "$CREATE" = true ]]
then
kubectl create ns argo

cat <<EOF | kubectl -n argo apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: argo-edl-credentials
type: Opaque
data:
  username: $(echo -n "${EDL_USERNAME}" | base64)
  password: $(echo -n "${EDL_PASSWORD}" | base64)
EOF

kubectl apply -n argo -f ./config/local-argo-deployment.yml
fi

# wait for argo to start up
while [[ $(kubectl -n argo get pods -l app=argo-server -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for argo" && sleep 5; done

if [[ "$CREATE" = true ]]
  then
  # create the workflow templates
  for f in ./config/workflow-templates/*; do
    argo -n argo template create "$f"
  done
fi

kubectl -n argo port-forward deployment/argo-server "$PORT:2746"
