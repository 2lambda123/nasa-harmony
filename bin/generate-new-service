#!/bin/bash

# Function to prompt the user and convert 'y' or 'n' to 'true' or 'false'
function prompt_user {
  local prompt_message="$1"
  local variable_name="${prompt_message// /_}"
  variable_name=$(echo "$variable_name" | tr '[:lower:]' '[:upper:]')

  read -p "$prompt_message (y/n): " user_input
  user_input=$(echo "$user_input" | tr '[:upper:]' '[:lower:]')

  if [ "$user_input" == "y" ]; then
      eval "$variable_name=true"
  else
      eval "$variable_name=false"
  fi
}

read -p "Service name: " SERVICE_NAME

# Convert SERVICE_NAME to uppercase and change dashes to underscores
SERVICE_NAME_UPPER=$(echo "$SERVICE_NAME" | tr '[:lower:]-' '[:upper:]_')

# Check if the service already exists in the config file
if grep -q "^\s*- name: $SERVICE_NAME" config/services.yml; then
  echo "Service with name '$SERVICE_NAME' already exists in config/services.yml. Not modifying."
else
  read -p "Organization name (used in docker image name): " ORGANIZATION
  prompt_user "Bbox subsetting"
  prompt_user "Shapefile subsetting"
  prompt_user "Temporal subsetting"
  prompt_user "Variable subsetting"
  prompt_user "Reprojection"
  prompt_user "Concatenation"
  read -p "List of CMR collection IDs (comma separated) to use the service (eg C1-PROV1,C2-PROV1,C3-PROV2): " COLLECTIONS

  # Create the new service directory at the same level as the harmony repository
  SERVICE_DIR="../harmony-$SERVICE_NAME"
  echo "Creating project directory $SERVICE_DIR"
  mkdir "$SERVICE_DIR"
  # Copy the Dockerfile, replacing the service name
  env SERVICE_NAME=$SERVICE_NAME envsubst < service-templates/Dockerfile > "$SERVICE_DIR/Dockerfile"
  # Copy the example service python file
  cp service-templates/sample_service.py "$SERVICE_DIR/$SERVICE_NAME.py"
  cp service-templates/README "$SERVICE_DIR"
  # Copy the build script
  env SERVICE_NAME=$SERVICE_NAME ORGANIZATION=$ORGANIZATION envsubst < service-templates/build-service > "$SERVICE_DIR/build-service"
  chmod +x "$SERVICE_DIR/build-service"


  # Append to config/services.yml
  cat <<-EOF >> config/services.yml

  - name: $SERVICE_NAME
    description: |
      TODO - fill in description
    data_operation_version: '0.18.0'
    type:
      <<: *default-turbo-config
      params:
        <<: *default-turbo-params
        env:
          <<: *default-turbo-env
          STAGING_PATH: public/$ORGANIZATION/$SERVICE_NAME
    umm_s: []
    capabilities:
      concatenation: $CONCATENATION
      subsetting:
        bbox: $BBOX_SUBSETTING
        variable: $VARIABLE_SUBSETTING
        temporal: $TEMPORAL_SUBSETTING
      output_formats:
        - application/netcdf4
      reprojection: $REPROJECTION
    steps:
      - image: !Env \${QUERY_CMR_IMAGE}
      - image: !Env \${${SERVICE_NAME_UPPER}_IMAGE}
EOF
fi

if grep -q "^$SERVICE_NAME_UPPER" env-defaults; then
  echo "Service with name '$SERVICE_NAME' already set up in env-defaults. Not modifying."
else
  if [[ -z $ORGANIZATION ]]; then
    read -p "Organization name (used in docker image name): " ORGANIZATION
  fi
  # Create the environment variables
  echo "Adding environment variables to main env-defaults"
  cat <<-EOF >> env-defaults
${SERVICE_NAME_UPPER}_IMAGE=$ORGANIZATION/$SERVICE_NAME:latest
${SERVICE_NAME_UPPER}_REQUESTS_MEMORY=128Mi
${SERVICE_NAME_UPPER}_LIMITS_MEMORY=512Mi
${SERVICE_NAME_UPPER}_INVOCATION_ARGS='python -m $SERVICE_NAME'
${SERVICE_NAME_UPPER}_SERVICE_QUEUE_URLS='["$ORGANIZATION/$SERVICE_NAME:latest,http://localstack:4566/queue/$SERVICE_NAME.fifo"]'

# Only for local testing - do not commit this change
${SERVICE_NAME_UPPER}_COLLECTIONS=$COLLECTIONS

EOF

  echo "Adding queue URL variable to lib/util env-defaults"
  cat <<-EOF >> lib/util/env-defaults
${SERVICE_NAME_UPPER}_SERVICE_QUEUE_URLS='["$ORGANIZATION/$SERVICE_NAME:latest,http://localstack:4566/queue/$SERVICE_NAME.fifo"]'

EOF
  echo "Configuring local .env file to deploy your service"
  sed -i '' "s/^LOCALLY_DEPLOYED_SERVICES=.*/&,${SERVICE_NAME}/" .env
fi

echo "Successfully setup project. You can take a look at env-defaults, .env, and config/services.yml to see how your service was set up for use in harmony.
Next steps:
cd ../harmony-${SERVICE_NAME}
Modify the .py file to replace the sample code in the process_item method with your service logic.
Build the image with ./build-service

Return to this directory and start up all of harmony including your service with:
cd ../harmony && ./bin/bootstrap-harmony
Once the command completes you can issue harmony requests for your collection and test your service."
