const { SecureTokenService } = require('../util/sts');

/**
 * Makes a call to assume a role that has access to S3 outputs generated by Harmony
 *
 * @param {RequestContext} context The request context
 * @param {String} username The user making the request
 * @returns {Object} credentials to act as that role
 */
async function _assumeS3OutputsRole(context, username) {
  const { id } = context;
  const params = {
    RoleArn: 'arn:aws:iam::351148546691:role/ngap/system/s3-same-region-access-role',
    RoleSessionName: `${username}-${id}`,
  };
  const sts = new SecureTokenService();
  const response = await sts.assumeRole(params);
  return response.Credentials;
}

/**
 * Express.js handler that handles the cloud access JSON endpoint (/cloud-access)
 *
 * @param {http.IncomingMessage} req The request sent by the client
 * @param {http.ServerResponse} res The response to send to the client
 * @returns {Promise<void>} Resolves when the request is complete
 */
async function cloudAccessJson(req, res) {
  req.context.logger = req.context.logger.child({ component: 'cloudAccess.cloudAccessJson' });
  try {
    const credentials = await _assumeS3OutputsRole(req.context, req.user);
    res.send(credentials);
  } catch (e) {
    req.context.logger.error(e);
    res.status(500);
    res.json({
      code: 'harmony:ServerError',
      description: 'Error: Failed to assume role',
    });
  }
}

const shebang = '!#/bin/sh';

/**
 * Express.js handler that handles the cloud access shell endpoint (/cloud-access.sh)
 *
 * @param {http.IncomingMessage} req The request sent by the client
 * @param {http.ServerResponse} res The response to send to the client
 * @returns {Promise<void>} Resolves when the request is complete
 */
function cloudAccessSh(req, res) {
  let { logger } = req.context;
  logger = logger.child({ component: 'cloudAccess.cloudAccessSh' });
  const accessKey = 'foo';
  const secretAccessKey = 'bar';
  const response = `${shebang}\nexport ACCESS_KEY=${accessKey}\nexport SECRET_ACCESS_KEY=${secretAccessKey}\n`;
  res.set('Content-Type', 'application/x-sh');
  res.send(response);
}

module.exports = { cloudAccessJson, cloudAccessSh };
