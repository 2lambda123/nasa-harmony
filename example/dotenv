# Harmony Environment Variables
# Example .env file.  Rename this file to '.env', move it to the root
# folder, and fill in your project values to make use of it.  Correct
# defaults are provided where possible for local development

###########################################################################
#                             General Config                              #
#                                                                         #
# Settings to control how Harmony behaves                                 #
###########################################################################

# Random string used to sign cookies that should be consistent between
# load-balanced instances of Harmony.  You can use
# `hexdump -n 128 -e '"%08x"' /dev/random`
# to generate a 128 byte random hex string (256 chars)
COOKIE_SECRET=

# The port on which to run the Harmony frontend
PORT=3000

# The port on which to run the Harmony backend that receives service
# callbacks
BACKEND_PORT=3001

# The base URL for the service callbacks. This needs to be accessible from
# wherever the service is run. The Harmony CI/CD scripts sets this to the
# backend load balancer when running on AWS. When running locally on a Mac
# or Linux, use the appropriate value below.
# Mac OS X:
# CALLBACK_URL_ROOT=http://host.docker.internal:3001
# Linux:
CALLBACK_URL_ROOT=http://localhost:3001

# The CMR Endpoint to use (e.g. URL for local, SIT, UAT, or production)
CMR_ENDPOINT=https://cmr.uat.earthdata.nasa.gov

# For testing: Whether to use Localstack instead of AWS S3.  Options are "true" or "false".
USE_LOCALSTACK=true

# If set to true, only include EDL cookies if the request is made via https.
USE_HTTPS=false

# Whether to run example service endpoints under /example.  Useful for
# testing HTTP backends without actual service calls.  See example/http-service.js
EXAMPLE_SERVICES=true

# Identifier so backends know which Harmony client submitted the request
CLIENT_ID=harmony-local

# When set to true log messages are logged as a text string instead of the default
# JSON format. Useful when running harmony locally and viewing logs via a terminal.
TEXT_LOGGER=

# Log level (error, warn, info, debug). Defaults to debug.
LOG_LEVEL=

# Number of granules allowed for a synchronous request. When the request exceeds
# this number it will be processed asynchronously. If a service provides a
# value in services.yml for maximum_sync_granules it will override this value.
MAX_SYNCHRONOUS_GRANULES=1

# Number of granules allowed for an asynchronous request. When the request exceeds
# this number it returns a message to the user indicating that we are limiting their
# service request to only the first MAX_ASYNCHRONOUS_GRANULES granules. If a service
# provides a value in services.yml for maximum_async_granules it will override this value.
MAX_ASYNCHRONOUS_GRANULES=20

# The maximum allowed granules in any request synchronous or asynchronous. If a service
# attempts to configure a value greater than this limit for either maximum_async_granules
# or maximum_async_granules we will override the configuration to limit to this value.
MAX_GRANULE_LIMIT=2000

# String to identify the type of environment.  Options:
#  - "development" for local development.
#  - "production" for deployments with a separate postgres server (SIT, UAT, Production).
#  - "test" for unit / integration tests
# This is a conventional identifier to switch application behavior but is
# currently only used to determine which database connection to use in
# db/knexfile.js
NODE_ENV=development

# Connection string to use to connect to the database.  Used for
# NODE_ENV="production" databases.  For development and test, this is
# ignored, using a sqlite3 file instead
DATABASE_URL=

# A bucket with brief lifecycle where temporary uploads (shapefiles) are stored while
# requests are in flight
UPLOAD_BUCKET=local-upload-bucket

# An IAM role that allows access to a bucket and prefix where outputs for asynchronous
# requests are stored by backend services.
SAME_REGION_ACCESS_ROLE=same-region-access-role

# The CMR concept ID for the group whose users can access the admin interface
ADMIN_GROUP_ID=AG1222736883-EEDTEST

# The base URL to use for interacting with queues.  The default value is correct for
# localstack.  For SQS, use `https://sqs.REGION.amazonaws.com/YOUR_ACCOUNT_ID/ENV_NAME-`
BASE_QUEUE_URL=http://localhost:4566/queue/

# The URL to use for interacting with Argo
ARGO_URL=http://localhost:2746

# The time (in seconds) between invocations of the job reaper service (default 10)
JOB_REAPER_PERIOD_SEC=10

# Jobs older than this many minutes that are running are checked by the job reaper (default 60)
REAPABLE_JOB_AGE_MINUTES=60

# The name of the dead letter queue for message-queue-based services
SERVICE_DEAD_LETTER_QUEUE_NAME=harmony-dead-letter-queue

# The number of ms to wait between polling to check whether a synchronous request completed
SYNC_REQUEST_POLL_INTERVAL_MS=100

###########################################################################
#                             Service Config                              #
#                                                                         #
# Variables defined in config/services.yml that get passed to backend     #
# services on invocation                                                  #
###########################################################################

# Docker image:tag names for services referenced in config/services.yml.
# Set to an image:tag available locally, on ECR, on DockerHub, etc.
#
# For Argo services, the image's pull policy variable controls the
# Kubernetes imagePullPolicy used for that service in a given
# environment. See the Kubernetes Container Images documentation for
# the possible imagePullPolicy values and their behavior:
#
#   https://kubernetes.io/docs/concepts/configuration/overview/#container-images
#
# Summary:
#
# Always:       Pulls new image (if available) on each container startup
# IfNotPresent: Pulls new image if it is not available locally
# Never:        Image is assumed to exist locally, it is never pulled
#
# Recommended pull policies by environment:
#
# Environment    Pull Policy    Behavior
# -----------------------------------------------------------------------
# Local          Never          The image:tag will not be pulled and must
#                               exist locally; this can be done by building
#                               the image or pulling it manually.
# Local          IfNotPresent   The image:tag will be pulled if it doesn't
#                               exist locally. If it has been pulled
#                               manually, it will always use that image.
#                               If it is built locally, it will use that
#                               image.
# Sandbox        Always         The image:tag will be pulled each time a
#                               workflow runs which needs the image. Note
#                               that K8S will check the image hash to determine
#                               if an image:tag has been changed, and only
#                               pull it if so.
# SIT            Always         The image:tag is pulled on each workflow run.
# UAT            Always         The image:tag is pulled on each workflow run.
# PROD           IfNotPresent   The image:tag is only pulled if it does not
#                               exist locally.
#
# For Local development, 'IfNotPresent' is recommended since this will use
# the new version of a local image that you are working on locally, while
# pulling any other images not currently under development.

# The image pull policy to use for any images which do not have an explicit
# pull policy configured. See the above table for the recommend value to use
# for the given environment.
DEFAULT_IMAGE_PULL_POLICY='Always'
DEFAULT_PARALLELISM=2

ASF_GDAL_IMAGE=asfdataservices/gdal-subsetter:latest
ASF_GDAL_IMAGE_PULL_POLICY='Always'
ASF_GDAL_PARALLELISM=2

GDAL_IMAGE=harmony/gdal:latest
GDAL_IMAGE_PULL_POLICY='Always'
GDAL_PARALLELISM=2

NETCDF_TO_ZARR_IMAGE=harmony/netcdf-to-zarr:latest
NETCDF_TO_ZARR_IMAGE_PULL_POLICY='Always'
NETCDF_TO_ZARR_PARALLELISM=2

SWOT_REPR_IMAGE=sds/swot-reproject:latest
SWOT_REPR_IMAGE_PULL_POLICY='Always'
SWOT_REPR_PARALLELISM=2

VAR_SUBSETTER_IMAGE=sds/variable-subsetter:latest
VAR_SUBSETTER_IMAGE_PULL_POLICY='Always'
VAR_SUBSETTER_REPR_PARALLELISM=2

PODAAC_L2_SUBSETTER_IMAGE=podaac/podaac-cloud/podaac-subsetter:latest
PODAAC_L2_SUBSETTER_IMAGE_PULL_POLICY='Always'
PODAAC_L2_SUBSETTER_PARALLELISM=2

PODAAC_PS3_IMAGE=podaac/podaac-cloud/podaac-shapefile-subsetter:latest
PODAAC_PS3_IMAGE_PULL_POLICY='Always'
PODAAC_PS3_PARALLELISM=2

PODAAC_NETCDF_CONVERTER_IMAGE=podaac/podaac-cloud/podaac-netcdf-converter:latest
PODAAC_NETCDF_CONVERTER_IMAGE_PULL_POLICY='Always'
PODAAC_NETCDF_CONVERTER_PARALLELISM=2

# The bucket where service output data will be staged, corresponds to the S3 bucket
# created in localstack when running locally
STAGING_BUCKET=local-staging-bucket

# When using data that cannot accept Earthdata Login tokens from Harmony,
# either because of application group setup or because they use a different
# Earthdata Login endpoint (e.g. Data needs production while Harmony and
# CMR need UAT), these provide a minimally-privileged user login for
# fetching remote data behind Earthdata Login.   This user should exist in
# all environments being used to fetch data
EDL_USERNAME=
EDL_PASSWORD=

# Random string used for encrypting and decrypting Earthdata login tokens
# sent to backend services
# `cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1`
# to generate a 32 character random string
SHARED_SECRET_KEY=

# Development only: hostname to be used to connect to the host OS, used in
# configuring localstack.  Once services fully use docker-compose, we can
# remove this config and just use "localstack"
# Mac OS X:
BACKEND_HOST=host.docker.internal
# Linux:
# BACKEND_HOST=localhost

#############################################################################
#                        OAuth 2 (Earthdata Login)                          #
#                                                                           #
# Variables used to configure OAuth 2 authentication for Harmony data users #
#                                                                           #
# To use Earthdata Login, you must first set up a new application using the #
# Earthdata Login UI.                                                       #
# https://wiki.earthdata.nasa.gov/display/EL/How+To+Register+An+Application #
#############################################################################

# The application client ID of your registered Earthdata Login application
OAUTH_CLIENT_ID=

# The application password set when creating the Earthdata Login
# application
OAUTH_PASSWORD=

# The URI that Earthdata Login will redirect to for token validation, which
# needs to be provided verbatim when setting up the Earthdata Login app.
# Leave "/oauth2/redirect" intact for all apps using Harmony.  Be sure to
# use HTTPS for non-local instances.
OAUTH_REDIRECT_URI=http://localhost:3000/oauth2/redirect

# The OAuth2 endpoint used to authenticate users into Harmony.  CMR and
# backend services must use the same endpoint to get full integration
OAUTH_HOST=https://uat.urs.earthdata.nasa.gov

###########################################################################
#                               Test Suite                                #
#                                                                         #
# Settings for altering the behavior of the test suite that are not used  #
# elsewhere in the application.                                           #
###########################################################################

# How to handle fixtures for remote calls in the test suite:
#   record (default): Perform and record new calls.  Replay existing calls.
#   bloody: Perform and record all calls.  Never play back.
#   replay: Always play back.  Throw an error if a call is not recorded.
#   cheat: Play back cached calls.  Perform and do not cache any new calls
REPLAY=record

# True if server logs should be allowed to go to STDOUT.  When false
# (default), they are routed to logs/test.log and suppressed in STDOUT
LOG_STDOUT=false
